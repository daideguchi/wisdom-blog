GitからZennと個人ブログへ同時展開：統合コンテンツワークフロー構築の設計書Part I: システムアーキテクチャと基本戦略1.1. 序論：「信頼できる唯一の情報源（Single Source of Truth）」というパラダイム本稿で提案するシステムの中心的な設計思想は、「信頼できる唯一の情報源（Single Source of Truth）」の確立です。これは、単一のGitリポジトリに格納されたMarkdownファイルを、Zennの記事と個人運営のブログ、両方の正典（カノニカルソース）として扱うことを意味します。このアプローチは、「Zennだけでなく、ブログとして知識を蓄えていきたい」というユーザーの根本的な要求に直接応えるものです。この手法には、コンテンツの重複排除、バージョン管理の簡素化、編集ワークフローの効率化、そして一貫した知識管理といった、数多くの利点があります。一方で、技術的な課題も存在します。それは、単一のgit push操作をトリガーとして、Zennへのコンテンツ同期と、個人ブログの完全なビルド・デプロイという、2つの異なる結果を導くためのパイプラインをいかにして構築するかという点です。本設計書は、この課題を解決するための包括的な計画を提示します。1.2. 高レベルワークフローとコンポーネント概要システム全体の流れは、以下の通りです。開発者: ローカル環境でMarkdownファイルを編集し、GitHubリポジトリのmainブランチにコミットし、プッシュします。GitHub: mainブランチへのプッシュを検知します。トリガー: on: pushイベントが、GitHub Actionsのワークフローを起動させます 1。並列実行: ワークフローは2つのプロセスを並行して開始します 3。経路A（Zennへの同期）: git pushそのものが、Zennの公式GitHub Appである「Zenn Connect」を起動させ、リポジトリ内のコンテンツをZennプラットフォームに自動で同期します。この経路はZennの堅牢な公式連携機能を活用するため、カスタムアクションは不要です 4。経路B（個人ブログのデプロイ）: 専用のGitHub Actionsジョブがリポジトリのコードをチェックアウトし、後述する推奨フレームワーク（Astro）を用いて静的サイトをビルドし、VercelやNetlifyといったホスティングプラットフォームへデプロイします。このアーキテクチャを構成する主要なコンポーネントは以下の通りです。コンテンツ: Zenn記法に準拠したMarkdownファイル（.mdまたは.mdx）。バージョン管理: GitおよびGitHub。自動化エンジン: GitHub Actions 7。Zenn連携: Zenn CLI（ローカルでの執筆・プレビュー用）およびZenn Connect（デプロイ用） 4。個人ブログ用フレームワーク: Astro（推奨）。ホスティング: Vercel（推奨）。この設計の核心は、ZennへのデプロイをGitHub Actionsで直接制御しようと試みるのではなく、Zennが公式に提供する最も安定した連携方法であるZenn Connectに委ねる点にあります。GitHub Actionsの役割は、Zenn Connectがカバーしない「個人ブログのビルドとデプロイ」という追加要件を満たすことに特化します。これにより、ワークフローの複雑性が低減し、Zenn側の仕様変更に対する耐性が高まり、システム全体の信頼性が向上します。1.3. フレームワーク選定：なぜSvelteKitではなくAstroを推奨するのかユーザーが参考として提示したsapper-blog-app 10 は、Sapperというフレームワークで構築されています。SapperはSvelteKitの前身であり、SvelteKit自体も最新のWebアプリケーションやブログを構築するための非常に強力な選択肢であることは間違いありません 11。しかし、本プロジェクトの特定の要件を考慮すると、Astro 15 がより最適な選択肢であると判断できます。その理由は以下の通りです。コンテンツファーストの思想: Astroは、本質的にコンテンツ中心のWebサイト（ブログ、ドキュメントサイトなど）を構築するために設計されており、本プロジェクトの目的と完全に合致しています 16。デフォルトでゼロJavaScript: Astroの「アイランドアーキテクチャ」は、インタラクティブなコンポーネントが必要な部分にのみJavaScriptを送信します。これにより、デフォルトで非常に高速なサイトが構築され、知識ベースとしてのブログに求められるパフォーマンス要件を高度に満たします 18。優れたMDX連携: AstroはMarkdownとMDX（Markdown with JSX）の扱いに長けており、カスタムコンポーネントの埋め込みが容易です。これは、Zennの標準機能を超えたリッチな表現を個人ブログで実現する上で、決定的な利点となります 19。簡潔なデータフェッチ: Astroが提供するAstro.glob()関数は、ローカルのMarkdownファイルをインポートし、一覧表示するための非常にシンプルで直感的なAPIを提供します。これにより、Zennのarticlesディレクトリからコンテンツを読み込む処理を極めて簡潔に記述できます 16。これらの理由から、本計画では個人ブログの構築基盤としてAstroを推奨します。Part II: Phase 1 - ローカル環境とプロジェクト初期化2.1. 前提条件とツールチェーンのインストール開発を開始する前に、以下のツールがシステムにインストールされている必要があります。Node.js: Zenn CLIの要求仕様に基づき、バージョン14以上のNode.jsが必須です 9。Git: バージョン管理システムとしてGitがインストール済みであることを前提とします。IDE: VS Codeのような、MarkdownやAstroの拡張機能が利用可能なコードエディタの使用を推奨します。2.2. プロジェクトの骨格構築とZennワークスペースのセットアップまず、プロジェクト全体のコンテナとなるディレクトリを作成し、Zennの執筆環境を構築します。ディレクトリ作成: プロジェクトのルートディレクトリを作成します（例: my-knowledge-base）。Git初期化: 作成したディレクトリ内でgit initコマンドを実行し、Gitリポジトリを初期化します。NPM初期化: npm init --yesコマンドを実行し、プロジェクトのpackage.jsonファイルを生成します 9。Zenn CLIのインストール: Zenn CLIをローカルの依存関係としてインストールします。Bashnpm install zenn-cli
プロジェクトごとにバージョンを固定し、可搬性を高めるため、グローバルインストール（-gオプション）ではなくローカルインストールを選択します 9。Zennワークスペースの初期化: npx zenn initコマンドを実行します 9。このコマンドは、Zennコンテンツ管理の基盤となる以下のディレクトリとファイルを生成します。articles/: 個々の記事を格納するMarkdownファイルの置き場所。books/: 複数のチャプターで構成される「本」のコンテンツを格納する場所。.gitignore: node_modulesなどを無視するように設定済みのファイル。config.yaml: Zennの本に関する設定を記述するファイル 26。2.3. Zennワークスペース内へのAstroプロジェクトのセットアップ次に、同じプロジェクト内に個人ブログを構築するためのAstroプロジェクトをセットアップします。Astroのインストール: プロジェクトのルートディレクトリで、以下のコマンドを実行します。Bashnpm create astro@latest
設定プロンプトへの回答 16:Project Name: AstroプロジェクトのファイルをZenn関連のファイルと分離するため、サブディレクトリを指定します。例: ./blog-appTemplate: 「a few best practices」または「an empty project」を選択します。Dependencies: Yesを選択し、npmの依存関係をインストールします。TypeScript: 「Strict」を選択します。Git: Noを選択します。リポジトリは既にルートディレクトリで初期化済みのためです。この結果、以下のようなハイブリッドなファイル構造が完成します。my-knowledge-base/
├──.git/
├──.gitignore
├── articles/         <-- Zennコンテンツ (信頼できる唯一の情報源)
├── books/
├── blog-app/         <-- Astroプロジェクト
│   ├── public/
│   ├── src/
│   ├── astro.config.mjs
│   └── package.json  <-- Astro用のpackage.json
├── node_modules/
└── package.json      <-- ルートのpackage.json (zenn-cliを含む)
2.4. 動作確認とローカル開発ワークフローセットアップが完了したら、両方のシステムが正しく動作することを確認します。テスト記事の作成: Zenn CLIを使用して、新しい記事ファイルを作成します。Bashnpx zenn new:article --slug my-first-post --title "My First Post"
これにより、articles/my-first-post.mdが生成されます 5。記事の編集: 生成されたMarkdownファイルを開き、本文を記述し、フロントマター（title, emoji, type, topics, published: trueなど）を適切に設定します 5。両方のプレビューを起動: 2つのターミナルウィンドウを開き、それぞれの開発サーバーを起動します。ターミナル1 (Zennプレビュー): プロジェクトのルートディレクトリでnpx zenn previewを実行します 24。これにより、通常http://localhost:8000でZenn上での表示を確認できるプレビューサーバーが起動します。ターミナル2 (Astro開発サーバー): cd blog-appでAstroプロジェクトのディレクトリに移動し、npm run devを実行します 16。これにより、通常http://localhost:4321で個人ブログの開発サーバーが起動します。この時点では、まだ記事は表示されません。このステップの目標は、Zenn CLIのプレビュー機能とAstroの開発サーバーが、互いに干渉することなく同時に実行できることを確認することです。Part III: Phase 2 - Astroによる個人ブログの開発3.1. コンテンツの取り込み：Astroとarticlesディレクトリの接続Astroプロジェクトはblog-app/内にありますが、コンテンツのソースは親ディレクトリにあるarticles/です。このコンテンツをAstroで読み込むには、Astro.glob()関数で相対パスを使用します。例えば、ブログのトップページ（記事一覧）を作成するblog-app/src/pages/index.astroでは、以下のように記述します。コード スニペット---
// Zennのarticlesディレクトリから全てのMarkdown投稿を取得
const posts = await Astro.glob('../../../articles/*.md');
---
<h1>My Blog</h1>
<ul>
  {posts.map((post) => (
    <li>
      <a href={post.url}>{post.frontmatter.title}</a>
    </li>
  ))}
</ul>
このコードは、Astroの強力なファイルベースAPIを利用して、外部のディレクトリから簡単にコンテンツを取得できることを示しています 16。3.2. 個別記事ページの動的生成次に、各記事の詳細ページを動的に生成します。これにはAstroの「動的ルーティング」機能を使用します。動的ルートファイルの作成: blog-app/src/pages/blog/[...slug].astroというファイルを作成します。[...slug]というファイル名は、URLのパス部分をslugというパラメータとして受け取ることを示します。getStaticPathsの実装: この関数は、ビルド時にどのページを生成すべきかをAstroに伝える役割を果たします。Astro.glob()で取得した記事情報をもとに、各ページのパスとプロパティを定義します。より堅牢な実装のために、AstroのContent Collections機能の利用を推奨します。これにより、フロントマターの型安全性が保証され、コンテンツ管理が容易になります 17。まず、blog-app/src/content/config.tsでコレクションを定義します。TypeScript// blog-app/src/content/config.ts
import { z, defineCollection } from 'astro:content';

const blogCollection = defineCollection({
  type: 'content',
  schema: z.object({
    title: z.string(),
    emoji: z.string(),
    type: z.enum(['tech', 'idea']),
    topics: z.array(z.string()),
    published: z.boolean(),
  }),
});

export const collections = {
  'blog': blogCollection,
};
次に、Astroにarticlesディレクトリをblogコレクションとして認識させるため、astro.config.mjsを修正します。JavaScript// blog-app/astro.config.mjs
import { defineConfig } from 'astro/config';

export default defineConfig({
  //...
  content: {
    sources: [
      {
        name: 'blog',
        path: '../articles/', // articlesディレクトリを指す
      },
    ],
  },
});
最後に、動的ルートファイル[...slug].astroをContent Collectionsを使うように書き換えます。コード スニペット---
// blog-app/src/pages/blog/[...slug].astro
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';

export async function getStaticPaths() {
  const blogEntries = await getCollection('blog');
  return blogEntries.map(entry => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();
---
<Layout title={entry.data.title}>
  <h1>{entry.data.title}</h1>
  <Content />
</Layout>
3.3. レイアウト、スタイリング、Zenn Markdown互換性マスターレイアウト: blog-app/src/layouts/Layout.astroを作成し、全ページで共通のHTML構造（<head>, ヘッダー、フッターなど）を定義します 11。スタイリング: スタイリング手法として、ユーティリティファーストのアプローチで人気の高いTailwind CSSを推奨します。npx astro add tailwindコマンドで簡単に導入できます 17。Markdown互換性: AstroのデフォルトMarkdownレンダラーは、Zennがサポートする基本的なMarkdown記法（見出し、リスト、コードブロックなど）と高い互換性を持っています 30。3.4. 高度なコンテンツ：MDXによるリッチなブログ体験このシステムを構築する上で、コンテンツの互換性について深く考慮する必要があります。AstroはMDX（.mdx）ファイルをサポートしており、これによりMarkdown内にインタラクティブなコンポーネント（AstroコンポーネントやReactコンポーネントなど）を直接埋め込むことが可能です 19。一方、Zennは独自の埋め込み記法（ツイートやYouTubeなど）はサポートしますが、ユーザーが定義したカスタムコンポーネントは解釈できません 33。この差異は、「信頼できる唯一の情報源」の原則に対する挑戦となります。例えば、articles/内のファイルに<MyCustomChart />のようなカスタムコンポーネントを記述した場合、Astroで構築した個人ブログでは意図通りにインタラクティブなチャートが表示されます。しかし、同じファイルがZennで処理されると、Zennのパーサーはこのタグを理解できず、単なる文字列として<MyCustomChart />と表示してしまい、レイアウト崩れや意図しない表示を引き起こす可能性があります。この問題を解決し、両プラットフォームでの体験を最適化するため、以下の「プログレッシブ・エンハンスメント（段階的強化）」戦略を提案します。.mdxの採用: Astroの全機能を利用するため、コンテンツファイルの拡張子を.mdから.mdxに変更することを検討します。Zennは.mdファイルを処理しますが、.mdxも同様に扱えるか事前の確認が必要です。もし扱えない場合は、ビルドプロセスで拡張子を変更するステップが必要になる可能性があります。コアコンテンツの維持: 記事の核となる情報（文章、コードブロック、画像など）は、両プラットフォームで共通して解釈される標準的なMarkdown記法で記述します。カスタムコンポーネントの限定的利用: 個人ブログでのみ機能するカスタムコンポーネントは、記事の理解に必須ではない「補助的な」要素にのみ使用します。例えば、特別な装飾を施したコールアウトボックスなどが該当します。グレースフル・デグラデーション（優雅な劣化）: カスタムコンポーネントがZennで正しく表示されなくても、その中のテキストコンテンツは読めるように設計します。これにより、Zenn上でも記事の主要な意味が損なわれないようにします。この戦略により、単一のソースファイルを維持しつつ、個人ブログではリッチな体験を、Zennでは堅実で正確な情報提供を実現するという、両立が図られます。Part IV: Phase 3 - GitHub Actionsによるデプロイの自動化4.1. リポジトリとプラットフォームの連携設定自動デプロイを実現するため、各サービスを連携させます。GitHubリポジトリ: ローカルで作成したプロジェクトを、GitHub上に新規作成したリポジトリ（プライベートまたはパブリック）にプッシュします。Zenn連携: Zennのダッシュボードにログインし、「GitHubからのデプロイ」設定ページに進みます。公式ガイドに従い、作成したGitHubリポジトリを「Zenn Connect」経由で連携します。デプロイ対象ブランチとしてmainを指定してください 5。ホスティングプロバイダ連携: Vercel（推奨）またはNetlifyにGitHubアカウントでサインアップします。これにより、プラットフォームがリポジトリにアクセスできるようになります。4.2. 統合デプロイワークフロー (.github/workflows/deploy.yml)プロジェクトのルートに.github/workflows/ディレクトリを作成し、その中にdeploy.ymlという名前でワークフローファイルを定義します 7。以下に、個人ブログをVercelにデプロイするための完全なワークフローファイルを示します。YAMLname: Deploy Personal Blog and Sync Zenn

on:
  push:
    branches:
      - main # mainブランチへのプッシュをトリガーとする [1]

jobs:
  # Job 1: 個人ブログ（Astroサイト）をVercelにデプロイする
  deploy_personal_blog:
    runs-on: ubuntu-latest # 実行環境を指定 [7]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # リポジトリのコードをチェックアウト [7]

      - name: Setup Node.js
        uses: actions/setup-node@v4 # Node.js環境をセットアップ [38]
        with:
          node-version: '20' # 最新のLTSバージョンを推奨
          cache: 'npm'
          cache-dependency-path: 'blog-app/package-lock.json' # Astroプロジェクトのロックファイルを指定

      - name: Install Dependencies
        working-directory:./blog-app # Astroプロジェクトのディレクトリで実行
        run: npm install

      - name: Build Astro Site
        working-directory:./blog-app # Astroプロジェクトのディレクトリで実行
        run: npm run build # ビルドコマンドを実行し、distディレクトリを生成

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v20 # Vercelへのデプロイを行うサードパーティアクション
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-project-name: "my-knowledge-base" # Vercel上のプロジェクト名
          working-directory:./blog-app # デプロイ対象のルートはblog-app
このワークフローの要点は以下の通りです。on: push: branches: [main]: mainブランチへのプッシュのみをトリガーとしてワークフローを実行します 1。jobs: 実行されるタスクを定義します。このファイルにはdeploy_personal_blogという単一のジョブしかありません。Zennへの同期はZenn Connectが暗黙的に処理するため、ここには記述しません。working-directory:./blog-app: npmコマンドやデプロイ対象のディレクトリがAstroプロジェクトのサブディレクトリであることを明示します。uses: 再利用可能な処理単位である「アクション」を指定します。actions/checkoutやactions/setup-nodeはGitHubが公式に提供する標準的なアクションです 7。secrets: 後述する、安全に管理された機密情報を参照します。4.3. 安全なデプロイのためのSecrets管理ワークフローファイルにAPIトークンなどの機密情報を直接書き込むことは、セキュリティ上の重大なリスクとなります。GitHub Actionsでは、これらの情報を「Secrets」として安全に保存する機能が提供されています 3。必要なSecrets:VERCEL_TOKEN: Vercelアカウントへのアクセスを許可するトークン。VercelのAccount Settings > Tokensページで生成します。VERCEL_ORG_ID: Vercelの組織ID。VercelのAccount Settingsで確認できます。VERCEL_PROJECT_ID: デプロイ対象となるVercelプロジェクトのID。プロジェクトのSettings > Generalページで確認できます。設定手順:GitHubリポジトリのページに移動します。Settings > Secrets and variables > Actions を選択します。New repository secretボタンをクリックし、上記の3つのSecretをそれぞれ名前と値を設定して登録します。これにより、ワークフローは安全にVercelと連携し、デプロイを実行できます。Part V: Phase 4 - ホスティングと最終デプロイ5.1. プラットフォーム選定：VercelとNetlifyの詳細比較Astroで構築した個人ブログを公開するには、ホスティングプラットフォームが必要です。Jamstackサイトのデプロイ先として、VercelとNetlifyが二大巨頭として知られています。どちらも優れたプラットフォームですが、機能や料金体系に違いがあるため、プロジェクトの要件に合わせて慎重に選択する必要があります。以下の比較表は、Astroブログのデプロイという観点から両プラットフォームを評価したものです。この表は、複数の情報源から断片的に得られるデータを統合し、意思決定を支援することを目的としています 40。特徴VercelNetlify無料枠: 帯域幅100 GB/月 41100 GB/月 41無料枠: サーバーレス関数100 GB時間/月 41125,000 呼び出し/月 41Proプラン料金$20/ユーザー/月 40$19/ユーザー/月 40Astroサポート非常に良好。@astrojs/vercelアダプタによりSSR/ハイブリッドレンダリングに完全対応 46。非常に良好。@astrojs/netlifyアダプタによりSSR/Edgeレンダリングに完全対応 48。デプロイモデルNext.jsなどのフレームワークに最適化。強力なSSRサポートが特徴 40。静的サイトに最適化。強力なEdge Functionsやフォーム、認証などのアドオンが豊富 40。独自機能Vercel Analytics, Image OptimizationNetlify Forms, Identity, Split Testing, Blobs 40推奨:本プロジェクトではVercelを推奨します。その理由は、最新のJavaScriptフレームワークとの親和性が高く、将来的にサーバーレス関数を利用した動的機能を追加する際に、GB時間ベースの料金体系がコスト予測をしやすいという利点があるためです。5.2. Vercelへのデプロイ手順GitHub Actionsを使用する前に、一度Vercelのダッシュボードから手動でプロジェクトをセットアップします。これにより、必要なプロジェクトIDなどが生成されます。Vercelダッシュボードにログインし、「Add New... > Project」をクリックします。GitHubリポジトリの一覧から、このプロジェクトのリポジトリを選択し、「Import」します。VercelはAstroを自動的に検出します 50。【重要】 Build and Output Settingsセクションで、「Root Directory」の項目をblog-appに変更します。これにより、Vercelはサブディレクトリ内にあるAstroプロジェクトを正しく認識します。「Deploy」をクリックします。ビルドが成功すれば、サイトが公開されます。この後、VercelプロジェクトのSettingsページからProject IDとOrg IDを取得し、前述の通りGitHubのSecretsに設定することで、GitHub Actionsからの自動デプロイが可能になります。5.3. カスタムドメインの設定Vercelプロジェクトの「Domains」タブから、所有しているカスタムドメインを追加できます。画面の指示に従い、ドメインレジストラ（ドメインを購入したサービス）のDNS設定を更新（AレコードまたはCNAMEレコードを追加）することで、独自のドメインでブログを公開できます 51。Part VI: 結論と今後の展望6.1. システム概要のまとめ本設計書では、単一のGitリポジトリを「信頼できる唯一の情報源」として、Zennと個人ブログという2つのプラットフォームにコンテンツを自動で展開するための、効率的かつ堅牢なワークフローを提案しました。このシステムは、Zennの公式連携機能であるZenn Connectと、Astro、GitHub Actions、Vercelを組み合わせることで、開発者の執筆体験を最大化し、手動によるデプロイ作業を完全に排除します。6.2. 機能拡張と将来の展望この基盤の上に、さらに多くの機能を追加することが可能です。Zenn「本」の管理: books/ディレクトリとconfig.yamlファイルの変更をトリガーとしたワークフローを構築し、本の管理も自動化します 26。自動Lint（静的解析）: GitHub Actionsにmarkdownlintを実行するジョブを追加し、プッシュされたMarkdownファイルのスタイルを自動でチェックし、品質を維持します 38。他プラットフォームへのクロスポスト: このワークフローのモジュール性を活かし、Qiitaなど、CLIツールを提供する他のプラットフォームへの自動投稿機能を追加することも可能です 21。検索機能の実装: 個人ブログに全文検索機能を追加し、ナレッジベースとしての利便性を向上させます。動的コンテンツの導入: Vercelアダプタによって有効化されたAstroのサーバーサイドレンダリング機能を活用し、個人ブログに問い合わせフォームやAPIと連携した動的なデータ表示などの機能を追加します 46。